@page "/blackjack"

@using BlazorGames.Models.Blackjack
@using BlazorGames.Pages.BlackjackPartials;

<PageTitle Title="Blackjack" />

@code {
    CardDeck deck = new CardDeck();
    Player dealer = new Player();
    Player player = new Player();

    GameStatus status = GameStatus.NotStarted;

    decimal pot = 0M;
    decimal change = 0M;

    bool hasStood = false;

    public async Task InitializeGame()
    {
        player.Funds += change;
        change = 0M;

        if (deck.Count <= 13)
        {
            status = GameStatus.Shuffling;
            await ForceDelay(1000);
            deck = new CardDeck();
        }

        status = GameStatus.Betting;
    }

    public async Task Bet(decimal amount)
    {
        if (player.Funds >= amount)
        {
            pot += amount;
            await Deal();
        }
    }

    public async Task Deal()
    {
        status = GameStatus.Dealing;
        //Deal a card to each player. The dealer's card is not visible.
        await player.AddCard(deck.Draw());
        StateHasChanged();

        var dealerCard = deck.Draw();
        dealerCard.IsVisible = false;
        await dealer.AddCard(dealerCard);
        StateHasChanged();

        //Deal another card to each player; these will both be visible.
        await player.AddCard(deck.Draw());
        StateHasChanged();

        await dealer.AddCard(deck.Draw());
        StateHasChanged();

        status = GameStatus.InProgress;

        //If either the player or the dealer has a natural blackjack, the hand is over.
        if (player.HasNaturalBlackjack() || dealer.HasNaturalBlackjack())
        {
            if (dealer.HasNaturalBlackjack())
            {
                dealer.Reveal();
            }
            ProcessBets();
        }
    }

    public async Task StartGame()
    {
        player = new Player();
        dealer = new Player();
        status = GameStatus.NotStarted;
        await InitializeGame();
    }

    public async Task StartHand()
    {
        player.Clear();
        dealer.Clear();
        status = GameStatus.NotStarted;
        await InitializeGame();
    }

    public async Task ForceDelay(int millis)
    {
        await Task.Delay(millis);
        StateHasChanged();
    }

    public async Task DealerMove()
    {
        if(dealer.Score() < 17)
        {
            await dealer.AddCard(deck.Draw());
        }
    }

    public async Task Hit()
    {
        await player.AddCard(deck.Draw());
        if(player.IsBusted)
        {
            ProcessBets();
        }
    }

    public async Task Stand()
    {
        hasStood = true;
        dealer.Reveal();
        while(dealer.Score() < 17)
        {
            await DealerMove();
        }
        ProcessBets();
    }

    public async Task DoubleDown()
    {
        //The player may only do this if their shown score is 9, 10, or 11.
        //If this happens, the player doubles their bet.
        pot *= 2;

        await ForceDelay(1000);

        //The player then gets one additional card
        await player.AddCard(deck.Draw());

        //At this point, the player is forced to stand, and we continue as normal.
        await Stand();
    }

    public void ProcessBets()
    {
        status = GameStatus.HandOver;
        if (player.HasNaturalBlackjack() && dealer.Score() != 21)
        {
            //Player gets their bet back, plus 1.5 * the bet
            change = pot * 2.5M;
        }
        else if (!player.IsBusted && dealer.IsBusted)
        {
            //If the player is not busted but the dealer is, the player gets the amount of their bet back, plus the bet again.
            change = pot * 2;
        }
        else if (!dealer.IsBusted && !player.IsBusted && player.Score() > dealer.Score())
        {
            //This is a "normal" win condition; the player has more than the dealer and neither are busted.
            change = pot * 2;
        }
        else if (!dealer.IsBusted && !player.IsBusted && player.Score() == dealer.Score())
        {
            //If there's a push, no money changes hands
        }
        else
        {
            change = pot * -1;
        }

        //No matter what, the pot gets reset
        pot = 0;
        hasStood = false;
    }
}

<div class="row">
    <div class="col-4">
        <div class="blackjack-drawdeck">
            <img src="images/blackjack/cardBack.png" />
        </div>
    </div>
    <div class="col-4">
        <BlackjackHand Cards="dealer.Cards" />
    </div>
    <div class="col-4">
        <ScoreDisplay Status="status" Player="dealer" />
    </div>
</div>
<div class="row">
    <div class="col-4">
        <FundsDisplay Funds="player.Funds" Change="change"/>
    </div>
    <div class="col-4">
        @if (status == GameStatus.Betting)
        {
            @if(player.Funds < 5)
            {
                <span class="display-3 text-danger">Not enough money!</span>
            }
            @if (player.Funds >= 5)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(5))">Bet $5</button>
            }
            @if (player.Funds >= 10)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(10))">Bet $10</button>
            }
            @if (player.Funds >= 20)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(20))">Bet $20</button>
            }
        }
        @if (status == GameStatus.Dealing || status == GameStatus.InProgress)
        {
            <span class="display-3 text-primary">$@pot</span>
        }
        @if(status == GameStatus.Shuffling)
        {
            <span class="display-3 text-info">Shuffling...</span>
        }
        @if (status == GameStatus.HandOver)
        {
            <HandResultDisplay Player="player" Dealer="dealer"/>
        }
    </div>
</div>

<div class="row">
    <div class="col-4">
        @if (status == GameStatus.NotStarted || player.Funds < 5)
        {
            <button class="btn btn-secondary" @onclick="(() => StartGame())">Start Game</button>
        }
        @if (!player.IsBusted && status == GameStatus.InProgress && !hasStood)
        {
            <button class="btn btn-primary" @onclick="(() => Stand())">Stand</button>
            <button class="btn btn-primary" @onclick="(() => Hit())">Hit</button>
            @if(player.Score() >= 9 && player.Score() <= 11)
            {
                <br/>
                <button class="btn btn-warning" @onclick="(() => DoubleDown())">Double Down</button>
            }
        }
        @if (status == GameStatus.HandOver)
        {
            <button class="btn btn-secondary" @onclick="(() => StartHand())">Next Hand</button>
        }
    </div>
    <div class="col-4">
        <BlackjackHand Cards="player.Cards" />
    </div>
    <div class="col-4">
        <ScoreDisplay Status="status" Player="player"/>
    </div>
</div>
