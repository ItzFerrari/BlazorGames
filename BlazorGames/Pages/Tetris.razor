@page "/tetris"
@using BlazorGames.Models.Tetris;
@using BlazorGames.Models.Tetris.Tetrominos; 
@using BlazorGames.Pages.Partials;
@inject IJSRuntime _jsRuntime;


<h3>Tetris</h3>

@code {
    Board board = new Board();

    TetrominoGenerator generator = new TetrominoGenerator();

    Tetromino currentPiece = new Tetromino();
    TetrominoStyle nextStyle;
    TetrominoStyle secondNextStyle;
    TetrominoStyle thirdNextStyle;

    int standardDelay = 1000;

    public async Task RunGame()
    {
        var currentPieceStyle = generator.Next();
        currentPiece = generator.CreateFromStyle(currentPieceStyle);

        nextStyle = generator.Next(currentPiece.Style);

        secondNextStyle = generator.Next(currentPiece.Style, nextStyle);

        thirdNextStyle = generator.Next(currentPiece.Style, nextStyle, secondNextStyle);

        board.State = GameState.Playing;

        await _jsRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);

        StateHasChanged();

        while(!board.Coordinates.HasRow(21))
        {
            StateHasChanged();

            await RunCurrentPiece();



            currentPiece = generator.CreateFromStyle(nextStyle);

            nextStyle = secondNextStyle;

            secondNextStyle = thirdNextStyle;

            thirdNextStyle = generator.Next(currentPiece.Style, nextStyle, secondNextStyle);
        }

        board.State = GameState.GameOver;
    }

    public async Task RunCurrentPiece()
    {
        while (currentPiece.CanMoveDown(board))
        {
            currentPiece.MoveDown(board);
            StateHasChanged();
            await Task.Delay(standardDelay);
        }

        board.Coordinates.AddGroup(currentPiece.CoveredSpaces.GetAll(), currentPiece.CssClass);

        await ClearCompleteRows();

        StateHasChanged();
    }

    public async Task ClearCompleteRows()
    {
        for (int i = 1; i <= board.Height; i++)
        {
            if (board.Coordinates.GetAllInRow(i).Count == board.Width)
            {
                board.Coordinates.SetCssClass(i, "tetris-clear-row");
                StateHasChanged();
                await Task.Delay(1500);
            }
        }
    }

    protected ElementReference myDiv;  // set by the @ref attribute

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);
        }
    }

    protected async Task KeyDown(KeyboardEventArgs e)
    {
        if (board.State == GameState.Playing)
        {
            if (e.Key == "ArrowRight")
            {
                currentPiece.MoveRight(board);
            }
            if (e.Key == "ArrowLeft")
            {
                currentPiece.MoveLeft(board);
            }
            if(e.Key == "ArrowDown")
            {
                while(currentPiece.CanMoveDown(board))
                {
                    currentPiece.MoveDown(board);
                    await Task.Delay(10);
                }
                StateHasChanged();
            }
            if(e.Key == "ArrowUp")
            {
                currentPiece.Rotate();
            }
            StateHasChanged();
        }
    }
}
<div class="row">
    <div class="col">
        @if (board.State == GameState.NotStarted)
        {
            <button @onclick="(() => RunGame())" class="btn btn-primary">Start!</button>
        }
        @if(board.State == GameState.Playing)
        {
            @currentPiece.CssClass
        }
        @if(board.State == GameState.GameOver)
        {
            <span>Thanks for playing!</span>
        }
    </div>
    
</div>

<div class="row">
    <div class="col">
        <div class="tetris-container" tabindex="0" @onkeydown="KeyDown" @ref="myDiv">
            @for (int i = board.Height; i >= 1; i--)
            {
                <div class="tetris-row">
                    @for (int j = 1; j <= board.Width; j++)
                    {
                        <TetrisCell Row="i" Column="j" Tetromino="currentPiece" State="board.State" OccupiedSpaces="board.Coordinates" />
                    }
                </div>
            }
        </div>
    </div>
    @if (board.State == GameState.Playing || board.State == GameState.Dropping)
    {
        <div class="col">
            <div class="row">
                <div class="col">
                    <h2>Upcoming Pieces</h2>
                </div>
            </div>
            <TetrisTetrominoDisplay Style="nextStyle" />
            <TetrisTetrominoDisplay Style="secondNextStyle" />
            <TetrisTetrominoDisplay Style="thirdNextStyle" />
        </div>
    }
</div>

