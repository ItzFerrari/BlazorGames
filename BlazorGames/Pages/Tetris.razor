@page "/tetris"
@using BlazorGames.Models.Tetris;
@using BlazorGames.Models.Tetris.Tetrominos; 
@using BlazorGames.Pages.Partials;
@inject IJSRuntime _jsRuntime;


<h3>Tetris</h3>

@code {
    Board board = new Board();

    TetrominoGenerator generator = new TetrominoGenerator();

    Tetromino currentPiece = new Tetromino();
    Tetromino nextPiece = new Tetromino();
    string key;

    int standardDelay = 1000;

    public async Task RunGame()
    {
        currentPiece = generator.Next(null);
        nextPiece = generator.Next(currentPiece.Style);

        board.State = GameState.Playing;

        await _jsRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);

        StateHasChanged();

        while(!board.Coordinates.HasRow(21))
        {
            StateHasChanged();

            await RunCurrentPiece();

            board.Coordinates.AddGroup(currentPiece.CoveredSpaces.GetAll(), currentPiece.CssClass);

            currentPiece = nextPiece;

            nextPiece = generator.Next(currentPiece.Style);
        }

        board.State = GameState.GameOver;
    }

    public async Task RunCurrentPiece()
    {
        while (currentPiece.CanMoveDown(board))
        {
            currentPiece.MoveDown(board);
            StateHasChanged();
            await Task.Delay(standardDelay);
        }
    }

    protected ElementReference myDiv;  // set by the @ref attribute

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("SetFocusToElement", myDiv);
        }
    }

    protected async Task KeyDown(KeyboardEventArgs e)
    {
        key = "Key Pressed: " + e.Key;
        if (board.State == GameState.Playing)
        {
            if (e.Key == "ArrowRight")
            {
                currentPiece.MoveRight(board);
            }
            if (e.Key == "ArrowLeft")
            {
                currentPiece.MoveLeft(board);
            }
            if(e.Key == "ArrowDown")
            {
                while(currentPiece.CanMoveDown(board))
                {
                    currentPiece.MoveDown(board);
                }
                StateHasChanged();
                await Task.Delay(10);
            }
            if(e.Key == "ArrowUp")
            {
                currentPiece.Rotate();
            }
            StateHasChanged();
        }
    }
}
<div class="row">
    <div class="col">
        @if (board.State == GameState.NotStarted)
        {
            <button @onclick="(() => RunGame())" class="btn btn-primary">Start!</button>
        }
        @if(board.State == GameState.Playing)
        {
            @currentPiece.CssClass
        }
        @if(board.State == GameState.GameOver)
        {
            <span>Thanks for playing!</span>
        }
    </div>
</div>

<div class="tetris-container" tabindex="0" @onkeydown="KeyDown" @ref="myDiv">
    @for (int i = board.Height; i >= 1; i--)
    {
        <div class="tetris-row">
            @for (int j = 1; j <= board.Width; j++)
            {
                <TetrisCell Row="i" Column="j" Tetromino="currentPiece" State="board.State" OccupiedSpaces="board.Coordinates" />
            }
        </div>
    }
</div>