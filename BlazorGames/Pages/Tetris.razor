@page "/tetris"
@using BlazorGames.Models.Tetris;
@using BlazorGames.Models.Tetris.Tetrominos; 
@using BlazorGames.Pages.Partials;
@using BlazorGames.Models.Tetris.Enums;
@inject IJSRuntime _jsRuntime;

@code {
    Grid grid = new Grid();

    //Creates new tetrominos as the game needs them
    TetrominoGenerator generator = new TetrominoGenerator();

    //Represents the currently-falling tetromino
    Tetromino currentTetromino;

    //Represents the next three tetromino styles.
    //The actual tetrominos will be created only when they become the current tetromino.
    TetrominoStyle nextStyle;
    TetrominoStyle secondNextStyle;
    TetrominoStyle thirdNextStyle;

    //The standard delay is how long the game waits before dropping the current piece by one row.
    int standardDelay = 1000;

    //This flag is set if the player "hard drops" a tetromino all the way to the bottom
    bool skipDelay = false;

    //The level increases for each 4000 points scored. Every time the level increases,
    //the standard delay gets shorter.
    int level = 1;
    int score = 0;

    protected ElementReference gameBoardDiv;  // set by the @ref attribute

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("SetFocusToElement", gameBoardDiv);
        }
    }

    public async Task RunGame()
    {
        //Generate the first piece to be dropped
        var currentPieceStyle = generator.Next();
        currentTetromino = generator.CreateFromStyle(currentPieceStyle, grid);

        //Generate the styles of the next three pieces that will be dropped
        nextStyle = generator.Next(currentTetromino.Style);
        secondNextStyle = generator.Next(currentTetromino.Style, nextStyle);
        thirdNextStyle = generator.Next(currentTetromino.Style, nextStyle, secondNextStyle);

        //Start playing the game
        grid.State = GameState.Playing;

        //Focus the browser on the board div
        await _jsRuntime.InvokeVoidAsync("SetFocusToElement", gameBoardDiv);

        //Where there is no piece with a row of 21 or greater
        while(!grid.Coordinates.HasRow(21))
        {
            StateHasChanged();

            await RunCurrentPiece();

            //Create the next piece to be dropped from the already-determined nextStyle,
            //and move the styles "up" in line
            currentTetromino = generator.CreateFromStyle(nextStyle, grid);
            nextStyle = secondNextStyle;
            secondNextStyle = thirdNextStyle;
            thirdNextStyle = generator.Next(currentTetromino.Style, nextStyle, secondNextStyle);
        }

        //Once there is a piece with a row of 21 or greater, the game is over.
        grid.State = GameState.GameOver;
    }

    public async Task Delay(int millis)
    {
        int totalDelay = 0;
        while (totalDelay < millis && !skipDelay)
        {
            totalDelay += 50;
            await Task.Delay(50);
        }
        skipDelay = false;
    }

    public async Task RunCurrentPiece()
    {
        //While the piece can still move down
        while (currentTetromino.CanMoveDown())
        {
            //Wait for the standard delay
            await Delay(standardDelay);

            //Move the piece
            currentTetromino.MoveDown();

            //Update the display
            StateHasChanged();

            //If the piece can no longer move down BUT can still move in other directions,
            //delay for an additional half-second to let the user move if they want.
            if (!currentTetromino.CanMoveDown() && currentTetromino.CanMove())
                await Delay(500);
        }

        //"Solidify" the current piece by adding its covered squares to the board's coordinates
        grid.Coordinates.AddMany(currentTetromino.CoveredSpaces.GetAll(), currentTetromino.CssClass);

        await ClearCompleteRows();

        LevelChange();

        StateHasChanged();
    }

    public void LevelChange()
    {
        //The user goes up a level for every 4000 points they score.
        int counter = 1;
        int scoreCopy = score;
        while(scoreCopy > 4000)
        {
            counter++;
            scoreCopy -= 4000;
        }

        int newLevel = counter;
        if(newLevel != level) //If the user has gone up a level
        {
            //Reduce the drop delay by 100 milliseconds.
            standardDelay = standardDelay - ((newLevel - 1) * 100);

            //Set the new level
            level = newLevel;
        }
    }

    public async Task ClearCompleteRows()
    {
        grid.State = GameState.ClearingRows;

        //For each row
        List<int> rowsComplete = new List<int>();
        for (int i = 1; i <= grid.Height; i++)
        {
            //If every position in that row is filled...
            if (grid.Coordinates.GetAllInRow(i).Count == grid.Width)
            {
                //Add the "complete" animation CSS class
                grid.Coordinates.SetCssClass(i, "tetris-clear-row");

                //Mark that row as complete
                rowsComplete.Add(i);
            }
        }

        //If there are any complete rows
        if(rowsComplete.Any())
        {
            StateHasChanged();

            //Collapse the "higher" coordinates down to fill in the completed rows.
            grid.Coordinates.CollapseRows(rowsComplete);

            //Calculate the score for the completed row(s)
            switch (rowsComplete.Count)
            {
                case 1:
                    score += 40 * level;
                    break;

                case 2:
                    score += 100 * level;
                    break;

                case 3:
                    score += 300 * level;
                    break;

                case 4:
                    score += 1200 * level;
                    break;
            }

            await Task.Delay(1000);
        }
        grid.State = GameState.Playing;
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        if (grid.State == GameState.Playing)
        {
            if (e.Key == "ArrowRight")
            {
                currentTetromino.MoveRight();
            }
            if (e.Key == "ArrowLeft")
            {
                currentTetromino.MoveLeft();
            }
            if(e.Key == "ArrowDown")
            {
                int addlScore = currentTetromino.Drop();
                score += addlScore;
                skipDelay = true;
                StateHasChanged();
            }
            if(e.Key == "ArrowUp")
            {
                currentTetromino.Rotate();
            }
            StateHasChanged();
        }
    }
}

<PageTitle Title="Tetris" />

<div class="row">
    <div class="col">
        @if (grid.State == GameState.NotStarted)
        {
            <button @onclick="(() => RunGame())" class="btn btn-primary">Start!</button>
        }
        @if(grid.State == GameState.GameOver)
        {
            <span>Thanks for playing!</span>
        }
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="tetris-container" tabindex="0" @onkeydown="KeyDown" @ref="gameBoardDiv">
            @for (int i = grid.Height; i >= 1; i--)
            {
                <div class="tetris-row">
                    @for (int j = 1; j <= grid.Width; j++)
                    {
                        <TetrisGridCell Row="i" Column="j" Tetromino="currentTetromino" Grid="grid" />
                    }
                </div>
            }
        </div>
    </div>
    @if (grid.State == GameState.Playing 
         || grid.State == GameState.ClearingRows
         || grid.State == GameState.GameOver)
    {
        <div class="col">
            <div class="row">
                <div class="col">
                    <h2>Score: @score</h2>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h2>Level: @level</h2>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h2>Upcoming Pieces</h2>
                </div>
            </div>
            <TetrisTetrominoDisplay Style="nextStyle" />
            <TetrisTetrominoDisplay Style="secondNextStyle" />
            <TetrisTetrominoDisplay Style="thirdNextStyle" />
        </div>
    }
</div>

